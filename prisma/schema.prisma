// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id              String       @id @default(uuid())
  name            String
  alias           String       @default("")
  email           String       @unique
  emailVerified   DateTime?
  password        String?      // opsional for auth provider
  image           String?
  birth           DateTime     @default(now())
  phone           String       @default("+62000-0000-0000")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  accounts        Account[]
  products        Products[]      @relation("UserToProducts")
}

model Account {
  id                 String    @id @default(uuid())
  userId             String    // Foreign Key
  user               User      @relation( fields: [userId], references: [id], onDelete: Cascade)
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  @@unique([userId])
  @@unique([provider, providerAccountId])
}

model Products {
  id              String       @id @default(uuid())
  userId          String       // Foreign Key
  user            User         @relation("UserToProducts", fields: [userId], references: [id])
  name            String
  description     String       @db.VarChar(9999)
  status          String
  price           Decimal
  stock           Int
  images          Image[]
  availableAt     DateTime     @default(now())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([userId])
}

model Image {
  id              String       @id @default(cuid())
  productId       String       // Foreign Key to Product
  product         Products      @relation(fields: [productId], references: [id], onDelete: Cascade)
  url             String       // URL of the image
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([productId])
}